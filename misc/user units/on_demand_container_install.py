# this turn docker containter on when there is request and off when idle

import os
import subprocess
import argparse


config = {
    "targets": [
        {
            "container_name": "memos",
            "idle_timeout": "10s",
            "listen_port": 5229,
            "foward_port": 5230,
        },
        {
            "container_name": "open-webui",
            "idle_timeout": "10min",
            "listen_port": 2999,
            "foward_port": 3000,
        },
    ],
}


def get_user_systemd_dir():
    systemd_dir = ""

    config_home = os.environ.get("XDG_CONFIG_HOME")
    if config_home:
        systemd_dir = os.path.join(config_home, "systemd", "user")
    else:
        # Fallback to default if XDG_CONFIG_HOME is not set
        systemd_dir = os.path.join(
            os.path.expanduser("~"), ".config", "systemd", "user"
        )

    if os.path.isdir(systemd_dir):
        return systemd_dir

    raise RuntimeError(f"cannot find systemd user dir at {systemd_dir}")


# this only works with docker rootless
def get_docker_host():
    docker_host = os.environ.get("DOCKER_HOST")

    if docker_host:
        return docker_host

    # fallback to unix://$XDG_RUNTIME_DIR/docker.sock
    xdg_runtime_dir = os.environ.get("XDG_RUNTIME_DIR")
    if xdg_runtime_dir:
        return f"unix://{xdg_runtime_dir}/docker.sock"

    raise RuntimeError("cannot find docker host (for docker rootless)")


# constant variable
FILENAME_PREFIX = "odcp-"
STOPALL_SERVICE_FILENAME = f"{FILENAME_PREFIX}stopallproxy.service"
DOCKER_HOST = get_docker_host()
SYSTEMD_USER_DIR = get_user_systemd_dir()


# mark these file by the prefix
def get_socket_filename(container_name):
    return f"{FILENAME_PREFIX}{container_name}-proxy.socket"


def get_service_filename(container_name):
    return f"{FILENAME_PREFIX}{container_name}-proxy.service"


def get_socket_filecontent(container_name, listen_port):
    return f"""\
# this file is autogenerated by a script
[Unit]
Description=Socket for on-demand {container_name} container proxy (Port {listen_port}).

[Socket]
ListenStream={listen_port}
Accept=no

[Install]
WantedBy=sockets.target
"""


def get_service_filecontent(
    container_name,
    listen_port,
    foward_port,
    idle_timeout="10min",
    docker_host=DOCKER_HOST,
):
    socket_name = get_socket_filename(container_name)
    return f"""\
# this file is autogenerated by a script
[Unit]
Description=on-demand {container_name} container proxy (Port {listen_port}).
Requires={socket_name}
After={socket_name}

[Service]
Type=simple

Environment="DOCKER_HOST={docker_host}"

ExecStartPre=docker start {container_name}

ExecStart=/usr/lib/systemd/systemd-socket-proxyd --exit-idle-time={idle_timeout}  localhost:{foward_port}

ExecStopPost=docker stop {container_name}
"""

# this script is expected to be start by a system unit
# with systemctl --user --machine=$${USER}@.host stop wpa_service.target
def get_stopall_service_filecontent(container_names):
    return f"""\
# this file is autogenerated by a script
[Unit]
Description=Stop all on-demand proxy services via Conflicts

Conflicts={" ".join([get_service_filename(c) for c in container_names])}

[Service]
Type=oneshot
ExecStart=/bin/true
"""


def install_target(container_name, listen_port, foward_port, idle_timeout):
    # write service and socket file
    service_filepath = os.path.join(
        SYSTEMD_USER_DIR, get_service_filename(container_name)
    )
    with open(service_filepath, "w") as f:
        f.write(
            get_service_filecontent(
                container_name=container_name,
                listen_port=listen_port,
                foward_port=foward_port,
                idle_timeout=idle_timeout,
            )
        )

    print(f"Write service {service_filepath}")

    socket_filepath = os.path.join(
        SYSTEMD_USER_DIR, get_socket_filename(container_name)
    )

    with open(socket_filepath, "w") as f:
        f.write(
            get_socket_filecontent(
                container_name=container_name, listen_port=listen_port
            )
        )

    print(f"Write socket {socket_filepath}")


def install_all(config):
    # install all files into the systemd user unit folder
    for target in config["targets"]:
        install_target(
            container_name=target["container_name"],
            listen_port=target["listen_port"],
            foward_port=target["foward_port"],
            idle_timeout=target["idle_timeout"],
        )

    # then install the stop all service
    stopall_filepath = os.path.join(SYSTEMD_USER_DIR, STOPALL_SERVICE_FILENAME)

    with open(stopall_filepath, "w") as f:
        f.write(
            get_stopall_service_filecontent(
                container_names=[t["container_name"] for t in config["targets"]]
            )
        )
    print(f"Write {stopall_filepath}")

    print("run daemon-reload")

    subprocess.run(["systemctl", "--user", "daemon-reload"], check=True)

    enable_all(config)


def enable_all(config):
    enable_targets = [
        get_socket_filename(t["container_name"]) for t in config["targets"]
    ]

    for t in enable_targets:
        print(f"enable {t}")

        subprocess.run(["systemctl", "--user", "enable", "--now", t], check=True)
        # do not start the stop all service


def disable_all():

    disable_targets = [
        f for f in os.listdir(SYSTEMD_USER_DIR) if f.startswith(FILENAME_PREFIX)
    ]

    for t in disable_targets:
        print(f"disable {t}")

        subprocess.run(["systemctl", "--user", "stop", t], check=True)
        subprocess.run(["systemctl", "--user", "disable", t], check=True)


def uninstall_all():
    disable_all()
    # this should only be run after all the unit is disabled

    for f in os.listdir(SYSTEMD_USER_DIR):
        if not f.startswith(FILENAME_PREFIX):
            continue

        print(f"remove {f}")
        fp = os.path.join(SYSTEMD_USER_DIR, f)
        if os.path.isfile(fp):
            os.remove(fp)

    print("run daemon-reload")
    subprocess.run(["systemctl", "--user", "daemon-reload"], check=True)


def main(args):

    if args.action in ["install", "i"]:
        # uninstall the old service first
        uninstall_all()
        install_all(config=config)

    elif args.action in ["uninstall", "r"]:
        uninstall_all()
    elif args.action == "start":
        enable_all(config=config, now=True)
    elif args.action == "stop":
        disable_all()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(dest="action", help="Available actions")
    subparsers.required = True

    install_parser = subparsers.add_parser(
        "install", aliases=["i"], help="install services and sockets"
    )

    uninstall_parser = subparsers.add_parser(
        "uninstall", aliases=["r"], help="uninstall services and sockets"
    )

    stop_parser = subparsers.add_parser("stop", help="stop services and sockets")

    args = parser.parse_args()

    main(args)
